作者的絮絮叨叨:
  本动画框架,借鉴部分其他框架的思想,完成了本框架的设计.
  使用上希望模仿RxJava上对于步骤的分化,当然,达不到RxJava的程度,只能说是往那个方向设计.
  在整体方向上,借鉴并朝着LeanCloud的方向走,它和RxJava很相似,也是分步骤,分任务,还有个全局缓存器,很方便的随时存取.
在任务间,随意的获取和放置.真的非常方便.
  上面为设计的思想.老实说,由于个人的能力限制和见识限制,所以没法一模一样,而且对于不同的设计对象来说,
也不太适合做的一模一样(尽管我不知道有没有设计专利这么一说),所以我更愿意是吸取更多的框架的设计思想,
来丰满这个框架,毕竟有过一句话"学我者生,像我者死".借鉴一部分就好了.
  所以,这里,我说一下本框架的一些结构.
  1,本框架分为三个层次:动画对象,动画任务,动作.
这三个层次从左到右依次减小,动画对象是最高层次,管理动画任务,提供直接对外的交互.包含多个动画任务,并且持有缓存仓库(HashMap).
动画任务为动画的操作的封装,内部包含多个动作,任务将依次执行动作,并可以通过监听器监听任务的开始,结束.
建议监听,因为你将更加了解动画的执行和处理异常.
动作为动画的最小节点,代表了动画的关键帧,同时有进度监听器,可以监听动作的进行程度.
  2,个人挺喜欢RxJava那种分步骤的代码表现方式,所以稍微借鉴了他的表现形式.不过没有去看RxJava的代码结构,
所以仅仅是外观上的借鉴,如果雷同或者不同,都请勿见怪.这种表现形式表现在BeanBuilder上.不过他仅仅是一个接口,
所以我写了一个DefaultBeanBuilder,作为一个模板.如果喜欢这种表现和使用方式,可以模仿我的写法,继承接口,
写一个自己的动作构造器.
  3,动作.对于动作,我也仅仅是写了一个默认的,但是肯定是不够的.毕竟动画的要求太多,所以我想要做的,更多是
提供一个设计思路和标准,同时也拆分动画本身.将动画进行拆分重构,使他表现及结构更加清晰.
所以惯例,动作是LAnimaBean,而且也仅仅是一个基类,什么也没有,因为我不愿意限制代码的扩展.同时,
为了让大家理解我的想法,我也写了一个示例LDefaultBean,用于基本的动画操作.
  4,任务.对于任务,我也定义了接口LAnima.内部也什么都没有,我依然提供了一个示例LAnimaObject.
不过对于特殊的动画要求,我也是很欢迎继承接口来写自己的任务实现,或者来对我的实现进行二次定制.
  5,执行者.由于执行的对象不同,所以我设定执行者身份,将当前属性设置给被执行者.
  6,计算器.计算器身份是由于不同的要求及效果需要的算法不一定,所以单独出计算器对象.
  总结:对于这个框架,我暂时没办法做得非常丰满,所以我在框架建设初步完成后,做更多的是丰满框架,而不是
丰富应用.我希望的是做一个架子,然后大家定制成自己喜欢和熟悉的动画框架,自己来添砖加瓦.
